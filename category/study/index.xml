<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>study | Academic</title>
    <link>https://example.com/category/study/</link>
      <atom:link href="https://example.com/category/study/index.xml" rel="self" type="application/rss+xml" />
    <description>study</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Wed, 10 May 2023 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://example.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>study</title>
      <link>https://example.com/category/study/</link>
    </image>
    
    <item>
      <title>Science programming languages</title>
      <link>https://example.com/post/science-programming-languages/</link>
      <pubDate>Wed, 10 May 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/science-programming-languages/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;libr&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Today, there are hundreds of programming languages in the world - how to choose the most suitable one for learning among them?&lt;/p&gt;
&lt;h2 id=&#34;bash&#34;&gt;Bash&lt;/h2&gt;
&lt;p&gt;The Unix shell scripts, created by Ken Thompson in the early 1970s, are closely related to the C programming language. Bash, an updated Unix shell, was first released in the late 80s and is still under active development today. Bash is usually used to write server configuration scripts, so it&amp;rsquo;s a good choice for today&amp;rsquo;s cloud environments with container storage and microservices. Shell scripts are used quite often, so knowledge of this language will come in handy.&lt;/p&gt;
&lt;p&gt;Also worth paying attention to is zsh, which is currently the default shell in macOS.&lt;/p&gt;
&lt;h2 id=&#34;cobol&#34;&gt;COBOL&lt;/h2&gt;
&lt;p&gt;One of the oldest languages still in use today was created by Grace Hopper in the late 1950s and was intended to standardize the development of large-scale business applications on computers. A brilliant concept that is still applied in cross-platform SDKs. An incredible 95% of ATM transactions go through COBOL systems, with many of these devices running around the clock 365 days a year. Device vendors such as IBM are developing more powerful machines designed for COBOL, but continue to maintain and update existing systems due to the costs and risks associated with replacing them. COBOL isn&amp;rsquo;t going anywhere anytime soon. This is a good choice for those who want to work with clients from the financial sector.&lt;/p&gt;
&lt;h2 id=&#34;cc&#34;&gt;C/C++&lt;/h2&gt;
&lt;p&gt;These languages often occupy the top of various ratings - they are valued for their power and speed. C was created in the early 1970s by Dennis Ritchie, C++ was developed in 1985 by Björn Stroustrup. Today, these two languages are at the heart of everything from the OS and games to modern scientific computing and machine learning. C and C++ are well-suited for demanding applications that value low-level hardware access and performance. Mastering these languages takes time and effort.&lt;/p&gt;
&lt;h2 id=&#34;c&#34;&gt;C&lt;/h2&gt;
&lt;p&gt;C#, released by Microsoft in 2000, was developed by Anders Hejlsberg as a cross-platform object-oriented programming language. It is now often used to develop business applications, APIs, games, and more. Due to its wide range of functions, this language is suitable for working with graphics and other asynchronous programming tasks.&lt;/p&gt;
&lt;h2 id=&#34;dart&#34;&gt;Dart&lt;/h2&gt;
&lt;p&gt;A modern language developed by Google for creating mobile, desktop, web and server applications. Its creator Lars Bak also came up with the JavaSript Engine V8. Dart resembles other modern object-oriented programming languages—C#, TypeScript, and Java—and provides a rich set of features suitable for defining complex interactions, asynchronous operations, animations, and other tasks.&lt;/p&gt;
&lt;h2 id=&#34;fortran&#34;&gt;Fortran&lt;/h2&gt;
&lt;p&gt;Fortran, developed at IBM in the 1950s by John Backus, is a general-purpose language that was created for scientific and engineering work. It is still widely used for these purposes, including for test testing of the fastest supercomputers in the world. It has also been used in space and physics research and weather modeling.&lt;/p&gt;
&lt;h2 id=&#34;java&#34;&gt;Java&lt;/h2&gt;
&lt;p&gt;Java is a general-purpose OOP language developed in the 1990s by James Gosling at Sun (now owned by Oracle) and designed to be compiled into bytecode to run on the Java Virtual Machine. By 2020, these include almost all kinds of devices – from TVs and game consoles to servers, phones, and even kitchen appliances. The language is widely spoken in corporations and universities, which has made it popular among both novice programmers and experienced developers.&lt;/p&gt;
&lt;h2 id=&#34;javascript&#34;&gt;JavaScript&lt;/h2&gt;
&lt;p&gt;JavaScript was developed by Brandon Eich in the 1990s to add script execution to websites. Today, it is a universal web interface language with powerful standardized features that are supported by all major browsers. JavaScript conforms to the EcmaScript standard, which is updated every few years with the addition of new language specifications. In addition, JavaScript is often used to develop back-end services and APIs, mobile applications, games, and other software. It&amp;rsquo;s a great choice to learn and further improve.&lt;/p&gt;
&lt;h2 id=&#34;julia&#34;&gt;Julia&lt;/h2&gt;
&lt;p&gt;A modern, high-level language designed for high-performance numerical processing and statistical analysis. Julia was developed in 2009 by Jeff Besanson, Stefan Karpinski, Viral B. Shah and Alan Edelman. It is one of the four languages that allow you to achieve petaflops-level supercomputer performance (along with C, C++ and Fortran). It is popular in universities, governments, and financial institutions.&lt;/p&gt;
&lt;h2 id=&#34;kotlin&#34;&gt;Kotlin&lt;/h2&gt;
&lt;p&gt;Designed for interoperability with Java, Kotlin is equipped with functional programming capabilities and OOP features, including working with lambda expressions, operator overloading, and so on. In 2019, Google named Kotlin the preferred language for Android development, so it&amp;rsquo;s definitely worth exploring for those who plan to create Android apps and plugins for popular SDKs.&lt;/p&gt;
&lt;h2 id=&#34;lisp&#34;&gt;Lisp&lt;/h2&gt;
&lt;p&gt;Lisp is a group of languages related to the historical implementation of LISP that was developed at MIT in the 1950s to describe programs in a mathematical way. The syntax in Lisp is based on s-expressions, which distinguishes it from most other languages, many of which are related to or influenced by C. Lisp was popular in early AI research and was widely used as a scripting language for CAD and other engineering applications, as it perceives code as data and allows you to customize the language using macros, which distinguishes it from more static languages. Among the well-known applications based on it are AutoLisp (a script for AutoCad) and Roomba. One of the languages of the family, Clojure, is especially useful for creating large-scale applications for business and the Internet.&lt;/p&gt;
&lt;h2 id=&#34;lua&#34;&gt;Lua&lt;/h2&gt;
&lt;p&gt;Lua was developed in 1993 by Roberto Ieruzalimski to be embedded in other applications. It is now widely used as a scripting language to add new features to programs. For example, it can be used to supplement the description of game logic in the development of video games or expand the set of user functions in graphics applications.&lt;/p&gt;
&lt;h2 id=&#34;powershell&#34;&gt;PowerShell&lt;/h2&gt;
&lt;p&gt;PowerShell was developed by Microsoft in 2006 to provide Unix-like command-line interface functions in Windows. It was later released as open source and ported to macOS, CentOS, and Ubuntu. PowerShell is widely used in systems that use Windows Server and other Microsoft technologies: it makes administration easier and reduces maintenance costs.&lt;/p&gt;
&lt;h2 id=&#34;python&#34;&gt;Python&lt;/h2&gt;
&lt;p&gt;Python, introduced in 1991 by Guido van Rossum, was conceived as a well-readable language with OOP functions, involving the use of functional paradigms to build clean and well-organized programs. Python is supported by major platforms and is used in a wide variety of fields, including science, data mining, artificial intelligence development, computer graphics for feature films, cloud computing, game development, and many others. Python is well-established and will remain one of the most sought-after tools for a long time to come.&lt;/p&gt;
&lt;h2 id=&#34;resource&#34;&gt;Resource&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://rb.ru/story/20-code-languages-to-learn/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://rb.ru/story/20-code-languages-to-learn/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating presentations</title>
      <link>https://example.com/post/creating-presentations/</link>
      <pubDate>Sun, 02 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/creating-presentations/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;libr&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;1-formulate-a-topic&#34;&gt;1. Formulate a topic&lt;/h2&gt;
&lt;p&gt;It is difficult to listen to an interlocutor who jumps from one to another, so the presentation should have only one topic. Otherwise, you will get a long story about nothing. The topic should be narrow enough to offer a solution to the problem at the end. Narrow down the topic until the presentation can be summarized in ten short paragraphs.&lt;/p&gt;
&lt;p&gt;It is easy to determine a good topic - it itself suggests the structure of the speech.&lt;/p&gt;
&lt;h2 id=&#34;2-define-a-goal&#34;&gt;2. Define a goal&lt;/h2&gt;
&lt;p&gt;A good presentation changes the current picture of the world. For example, people are beginning to take care of the environment or run for a new smartphone. The goal does not have to be ambitious, the main thing is specific.&lt;/p&gt;
&lt;p&gt;A good presentation goal starts with the question: what do I want to change in the behavior of listeners.&lt;/p&gt;
&lt;h2 id=&#34;3-think-about-the-scenario&#34;&gt;3. Think about the scenario&lt;/h2&gt;
&lt;p&gt;The purpose of the presentation is what you want to change in the listener&amp;rsquo;s head, and the script is how you will arrive at that change.&lt;/p&gt;
&lt;p&gt;Imagine you&amp;rsquo;re making up a story. The listener needs to be intrigued, come up with an interesting hero, guide him through difficulties to a successful ending. This is the basic structure of any text and presentation.&lt;/p&gt;
&lt;h2 id=&#34;4-show-examples&#34;&gt;4. Show examples&lt;/h2&gt;
&lt;p&gt;Less theory, more life. Show how your product works and how people use it. See how they do it on Kickstarter.&lt;/p&gt;
&lt;p&gt;Real stories of people, screenshots of programs and live photos of the product look more convincing than dry text and photos from photo stocks.&lt;/p&gt;
&lt;h2 id=&#34;5-alternate-slides&#34;&gt;5. Alternate slides&lt;/h2&gt;
&lt;p&gt;The presentation is like text. If the text consists of sentences of the same length and the same type, it will be boring to read. There is no rhythm. Therefore, alternate text slides and slides with images, add graphs. Sometimes you can make a joke.&lt;/p&gt;
&lt;h2 id=&#34;6-tell-me-what-to-do-next&#34;&gt;6. Tell me what to do next&lt;/h2&gt;
&lt;p&gt;A bad speech ends like this: &amp;ldquo;That&amp;rsquo;s it, now the questions.&amp;rdquo; So you leave the listener alone with his thoughts.&lt;/p&gt;
&lt;p&gt;A good presentation gives clear instructions on what to do next. It&amp;rsquo;s not necessarily a call to action. At the end, you can once again go through the conclusions, emphasize the main thesis or say where to get additional information.&lt;/p&gt;
&lt;p&gt;End with instructions or output.&lt;/p&gt;
&lt;h2 id=&#34;7-fewer-colors&#34;&gt;7. Fewer colors&lt;/h2&gt;
&lt;p&gt;The presentation should have 1-2 primary colors. For example, for background, text, and icons. Follow the chosen sequence and do not change colors unnecessarily. It is quite difficult to choose colors on your own, especially if you are not a designer. If you&amp;rsquo;re making a corporate presentation, use brand colors.&lt;/p&gt;
&lt;p&gt;If there are no corporate colors, use color selection sites. There are ready-made combinations that are pleasant to look at.&lt;/p&gt;
&lt;h2 id=&#34;8-more-contrast&#34;&gt;8. More contrast&lt;/h2&gt;
&lt;p&gt;White on blue can look nice on your computer with a Retina screen. But if you have to show the presentation through the projector, the text will not be read. Therefore, use contrasting colors. The biggest contrast: black and white. The rest can be checked using the contrast check service.&lt;/p&gt;
&lt;h2 id=&#34;9-fewer-fonts&#34;&gt;9. Fewer fonts&lt;/h2&gt;
&lt;p&gt;One font is enough to create a presentation. Take a modern sans-serif font: Open Sans, Roboto, PT Sans (these fonts are free to use). These are simple fonts that are easy to read. It&amp;rsquo;s easy to check: step away from the screen and try to read the headline. If it&amp;rsquo;s easy to read, you guessed it. Accents can be made by changing the font weight.&lt;/p&gt;
&lt;h2 id=&#34;10-the-rule-of-thirds&#34;&gt;10. The Rule of Thirds&lt;/h2&gt;
&lt;p&gt;This rule of creating presentations helps to arrange objects on the slide so that the eye immediately highlights the most important. Divide the slide into thirds lengthwise and wide. Place significant objects at intersections. Significant objects are headings and illustrations.&lt;/p&gt;
&lt;h2 id=&#34;11-texts-shorter&#34;&gt;11. Texts shorter&lt;/h2&gt;
&lt;p&gt;One slide, one thought. Such a slide is easy to read and remember. If you speak in public, it will keep the audience&amp;rsquo;s attention. Exactly how much text will be on the slide depends on the size of the audience. If a person reads a presentation on a screen, a paragraph of text will not scare him. If you are speaking in front of an audience of a hundred people, it will be difficult to read more than ten words on a slide.&lt;/p&gt;
&lt;h2 id=&#34;12-calculate-how-many-slides-should-be-in-the-presentation&#34;&gt;12. Calculate how many slides should be in the presentation&lt;/h2&gt;
&lt;p&gt;A simple rule that can be taken as a basis for creating presentations is one slide per minute. If your presentation is designed for 30 minutes, then the optimal number of slides is also 30!&lt;/p&gt;
&lt;h2 id=&#34;13-add-images&#34;&gt;13. Add images&lt;/h2&gt;
&lt;p&gt;Photos and icons help to reveal the content, but should not replace it. If you find a beautiful photo &amp;ldquo;in the topic&amp;rdquo; that does not help to reveal the idea, do not use it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Where to look for free images - Tilda&amp;rsquo;s instructions&lt;/li&gt;
&lt;li&gt;Where to look for free icons - Tilda&amp;rsquo;s instructions&lt;/li&gt;
&lt;li&gt;How to choose an image that will strengthen the thought - an article by Maxim Ilyakhov&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;14-make-friends-slides&#34;&gt;14. Make friends slides&lt;/h2&gt;
&lt;p&gt;In the presentation, all elements should be friends, that is, be of the same type. Then it is perceived easily, because it meets expectations.&lt;/p&gt;
&lt;p&gt;Make several templates for each type of slide: a slide with text, with an image, a graph. Then just duplicate the slides and change only the text and images.&lt;/p&gt;
&lt;p&gt;A presentation where the same type of elements occupy the same place on each slide looks neat.&lt;/p&gt;
&lt;h2 id=&#34;resource&#34;&gt;Resource&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://tilda.education/articles-how-to-create-presentation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://tilda.education/articles-how-to-create-presentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Markdown</title>
      <link>https://example.com/post/markdown/</link>
      <pubDate>Sun, 02 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/markdown/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;libr&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;about-the-markdown&#34;&gt;About the Markdown&lt;/h2&gt;
&lt;p&gt;Markdown is a readable markup language that is transparently converted to HTML. You can open and edit it in any text editor. It is widely used for writing documentation and README files.&lt;/p&gt;
&lt;h2 id=&#34;syntax-paragraph&#34;&gt;Syntax. Paragraph&lt;/h2&gt;
&lt;p&gt;A paragraph is one or more consecutive lines of text separated by one or more empty lines. If a string contains only spaces or tabs, it is still considered empty.&lt;/p&gt;
&lt;p&gt;Consecutive lines will be glued into one, if you do not add a hard transfer. There are several ways to do this:&lt;/p&gt;
&lt;p&gt;add two (or more) spaces at the end of &amp;lt; &amp;gt;&amp;lt; &amp;gt;;
add a backslash at the end of the line ;
add an HTML line wrap tag &lt;br&gt;.&lt;/p&gt;
&lt;h2 id=&#34;headings&#34;&gt;Headings&lt;/h2&gt;
&lt;p&gt;Markdown offers two styles of writing headings: through lattices (#) and through underscores (====). You can use up to six levels of headings, but underscores only allow you to create the first two (&lt;h1&gt; and &lt;h2&gt;).&lt;/p&gt;
&lt;p&gt;🤓
In English-language sources, the terms Atx-style (for lattices) and Setext-style (for underscores) are used to indicate the styles of writing headings.&lt;/p&gt;
&lt;h2 id=&#34;grilles&#34;&gt;Grilles&lt;/h2&gt;
&lt;p&gt;Grilles (Atx-style) Copy the link to the section &amp;ldquo;Lattices (Atx-style)&amp;rdquo;
In order to select the title, you need to put from 1 to 6 bars (#) and a space at the very beginning of the line. The level of the header depends only on the number of lattices.&lt;/p&gt;
&lt;h2 id=&#34;underscores-setext-style&#34;&gt;Underscores (Setext-style)&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;Underlining&amp;rdquo; a paragraph with equal signs (=) or hyphens (-) makes it the title of the first or second level, respectively. The level of the header depends only on the type of &amp;ldquo;dashes&amp;rdquo;, their number does not matter.&lt;/p&gt;
&lt;p&gt;There should be no empty lines between the text and the underline.&lt;/p&gt;
&lt;h2 id=&#34;lists-marked&#34;&gt;Lists. Marked&lt;/h2&gt;
&lt;p&gt;To create bulleted (unnumbered) lists, you need to put a minus (-), plus (+) or an asterisk (*) before each item. The marker and the text of the paragraph must be separated by a space. If there are different markers in front of the items in a row, then after the conversion we will get different lists.&lt;/p&gt;
&lt;h2 id=&#34;ordered&#34;&gt;Ordered&lt;/h2&gt;
&lt;p&gt;If we use numbers with a dot at the end (1., 2., etc.) as markers, we will get an ordered (numbered) list. The item numbers in the final markup will go in order (1, 2, 3), even if markdown will be 1., 4., 9.. This feature allows us to use &amp;ldquo;lazy numbering&amp;rdquo;, when the same number is placed before each item. The number before the first item shows where to start numbering the list items, so if you put 99., 22. in Markdown, then in the final markup the items will be under the numbers 99, 100, 101. 1.&lt;/p&gt;
&lt;h2 id=&#34;nesting&#34;&gt;Nesting&lt;/h2&gt;
&lt;p&gt;Any lists can be nested within each other, for this you need to put a tab or several spaces in front of the marker.
The number of spaces you need to use to nest one list within another can vary. It depends on the number of characters in the parent marker (L):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;— 1 character (L = 1)&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;— 2 characters (L = 2)&lt;/li&gt;
&lt;li&gt;— 3 characters (L = 3)
Before the nested list, you need to put from L + 1 to L + 4 spaces.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;If you put a triangular bracket (&amp;gt;) at &amp;gt; the line, Markdown will turn the text after it into a quote. Inside can be any blocks: paragraphs, headlines or even other quotes.&lt;/p&gt;
&lt;h2 id=&#34;source-code&#34;&gt;Source code&lt;/h2&gt;
&lt;p&gt;Markdown allows you to mark up the source code in a special way, all characters inside will be automatically escaped. There are 3 ways how this can be done:&lt;/p&gt;
&lt;p&gt;Wrap the code with one or two pairs of backsticks (&lt;code&gt;код&lt;/code&gt;)
Wrap the code with three or more pairs of backsticks (&lt;code&gt;код&lt;/code&gt;)
Put a tab or 4 spaces before each line of code&lt;/p&gt;
&lt;h2 id=&#34;one-or-two-pairs-of-backsticks&#34;&gt;One or two pairs of backsticks&lt;/h2&gt;
&lt;p&gt;This method allows you to insert the source code as a lowercase element. Even if we actually have a few lines of code wrapped in backsticks, we will still get one line after converting to HTML.&lt;/p&gt;
&lt;h2 id=&#34;three-or-more-pairs-of-backsticks&#34;&gt;Three or more pairs of backsticks&lt;/h2&gt;
&lt;p&gt;If we wrap one line of code with three or more pairs of backsticks, we get a lowercase element, and if there are several lines, then a block element. The second option allows you to specify the programming language that we use, for this we need to write it immediately after the opening backsticks.&lt;/p&gt;
&lt;p&gt;After designating the programming language, nothing will change visually, but this will allow additional plug-ins and scripts to highlight the code inside the block.&lt;/p&gt;
&lt;h2 id=&#34;indentation&#34;&gt;Indentation&lt;/h2&gt;
&lt;p&gt;Another way to highlight the code is to put a tab or 4 spaces in front of it. The source code must be separated by an empty line from the previous block.&lt;/p&gt;
&lt;h2 id=&#34;select-text&#34;&gt;Select text&lt;/h2&gt;
&lt;p&gt;If you wrap text with asterisks (*) or underscores (_), it becomes bold or italic. Both characters work the same way, the selection style depends only on their number:&lt;/p&gt;
&lt;p&gt;one pair * or _ will make the text &lt;em&gt;italic&lt;/em&gt;;
two * or _ will make the text &lt;strong&gt;bold&lt;/strong&gt;;
three * or _ will apply both styles***.&lt;/p&gt;
&lt;p&gt;To escape markdown service characters, you need to put a backslash before each of them (*, _, **).&lt;/p&gt;
&lt;h2 id=&#34;standardization&#34;&gt;Standardization&lt;/h2&gt;
&lt;p&gt;Markdown has an original specification from one of the language&amp;rsquo;s creators, John Gruber. Unfortunately, it doesn&amp;rsquo;t always unambiguously describe the syntax, which is why many Markdown converters work differently. To remedy this situation, a group of &amp;ldquo;Markdown fans&amp;rdquo; created CommonMark, a specification that describes many special cases, and a reference implementation of the Markdown parser on JS.&lt;/p&gt;
&lt;h2 id=&#34;resource&#34;&gt;Resource&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://doka.guide/tools/markdown/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://doka.guide/tools/markdown/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Version control system. Git.</title>
      <link>https://example.com/post/version-control-system/</link>
      <pubDate>Thu, 16 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/version-control-system/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;libr&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;about-the-version-control-system&#34;&gt;About the version control system&lt;/h2&gt;
&lt;p&gt;What is a &amp;ldquo;version control system&amp;rdquo; and why is it important? A version control system is a system that writes changes to a file or set of files over time and allows you to return to a specific version later. For file version control, this book will use the source code of the software as an example, although in fact you can use version control for almost any type of file.&lt;/p&gt;
&lt;p&gt;If you are a graphic or web designer and want to save each version of the image or layout (most likely, you will want), the version control system (hereinafter referred to as SCR) is just what you need. It allows you to return files to the state they were in before the changes, return the project to its original state, see the changes, see who last changed something and caused the problem, who set the task and when, and much more. Using SCR also means in general that if you break something or lose files, you can easily fix it. On top of that, you&amp;rsquo;ll get it all without any extra effort.&lt;/p&gt;
&lt;h2 id=&#34;local-version-control-systems&#34;&gt;Local version control systems&lt;/h2&gt;
&lt;p&gt;Many people use copying files to a separate directory (perhaps even a time-stamped directory if they are smart enough) as a version control method. This approach is very common because of its simplicity, but it is incredibly prone to errors. You can easily forget which directory you are in and accidentally change the wrong file or copy the wrong files.&lt;/p&gt;
&lt;p&gt;In order to solve this problem, programmers long ago developed local VCS with a simple database that stores records of all changes in files, thereby controlling audits.&lt;/p&gt;
&lt;p&gt;One of the popular SCR was the RCS system, which is still distributed today with many computers. RCS stores sets of patches (differences between files) on disk in a special format, using which it can recreate the state of each file at a given point in time.&lt;/p&gt;
&lt;h2 id=&#34;centralized-version-control-systems&#34;&gt;Centralized version control systems&lt;/h2&gt;
&lt;p&gt;The next major problem that people face is the need to interact with other developers. In order to deal with it, centralized version control systems (CSCR) were developed. Systems such as CVS, Subversion, and Perforce use a single server containing all versions of files, and a number of clients that retrieve files from this centralized repository. The application of CSCR has been the standard for many years.&lt;/p&gt;
&lt;p&gt;This approach has many advantages, especially over local SLE. For example, all the developers of the project to some extent know what each of them does. Administrators have full control over who can do what, and it is much easier to administer CSCR than it is to operate on-premises databases on each tenant.&lt;/p&gt;
&lt;p&gt;Despite this, this approach also has serious drawbacks. The most obvious disadvantage is a single point of failure, represented by a centralized server. If this server goes down for an hour, then during this time no one will be able to use version control to save the changes they are working on, nor will anyone be able to share these changes with other developers. If the hard disk on which the central database is stored is damaged, and there are no timely backups, you will lose everything - the entire history of the project, except for single snapshots of the repository that were saved on the local machines of the developers. Local SLE suffers from the same problem: when the entire history of the project is stored in one place, you risk losing everything.&lt;/p&gt;
&lt;h2 id=&#34;distributed-version-control-systems&#34;&gt;Distributed version control systems&lt;/h2&gt;
&lt;p&gt;This is where distributed version control systems (RSKV) come into play. In RSCV (such as Git, Mercurial, Bazaar, or Darcs), clients don&amp;rsquo;t just download a snapshot of all files (the state of files at a specific point in time) — they copy the repository entirely. In this case, if one of the servers through which the developers exchanged data dies, any client repository can be copied to another server to continue. Each copy of the repository is a complete backup of all data.&lt;/p&gt;
&lt;p&gt;Moreover, many RSCs can interact with multiple remote repositories at the same time, so you can work with different groups of people using different approaches at the same time within the same project. This allows you to apply several approaches at once in the development, for example, hierarchical models, which is completely impossible in centralized systems.&lt;/p&gt;
&lt;h2 id=&#34;resource&#34;&gt;Resource&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://git-scm.com/book/ru/v2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://git-scm.com/book/ru/v2/&lt;/a&gt;Введение-О-системе-контроля-версий&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
